/*
 * Powershell Selenium Remote Control Formatter 
 */

load('remoteControl.js');

this.name = 'Powershell (Remote Control)';

function testMethodName(testName) {
	return 'The' + capitalize(testName) + 'Test';
}
NotEquals.prototype.assert = function() {
  return '[NUnit.Framework.Assert]::AreNotEqual(' + this.e1.toString() + ', ' + this.e2.toString() +  ')';
};

function assertTrue(expression) {
	return '[NUnit.Framework.Assert]::IsTrue(' + expression.toString() + ')';
}

function assertFalse(expression) {
	return '[NUnit.Framework.Assert]::IsFalse(' + expression.toString() + ')';
}

this.options = {
    receiver: '$selenium',
    driver_capabilities: 'Firefox()',
    indent:	'tab',
    initialIndents:	'3',
    base_url: 'http://docs.seleniumhq.org/docs/02_selenium_ide.jsp',
    header: 'Param (\n'+
     '[switch] $browser\n'+
     ')\n'+
     '# http://stackoverflow.com/questions/8343767/how-to-get-the-current-directory-of-the-cmdlet-being-executed\n'+
     'function Get-ScriptDirectory\n'+
     '{\n'+
     '$Invocation = (Get-Variable MyInvocation -Scope 1).Value\n'+
     'if ($Invocation.PSScriptRoot) {\n'+
     '$Invocation.PSScriptRoot\n'+
     '}\n'+
     'Elseif ($Invocation.MyCommand.Path) {\n'+
     'Split-Path $Invocation.MyCommand.Path\n'+
     '} else {\n'+
     '$Invocation.InvocationName.Substring(0,$Invocation.InvocationName.LastIndexOf("\"))\n'+
     '}\n'+
     '}\n'+
     '$shared_assemblies = @(\n'+
      '"ThoughtWorks.Selenium.Core.dll",\n'+
      '"nunit.core.dll",\n'+
      '"nunit.framework.dll"\n'+
      ')\n\n'+
     '$env:SHARED_ASSEMBLIES_PATH = "c:\\developer\\sergueik\\csharp\\SharedAssemblies"\n'+
     '$shared_assemblies_path = $env:SHARED_ASSEMBLIES_PATH\n'+
     'pushd $shared_assemblies_path\n'+
     '$shared_assemblies | foreach-object { Unblock-File -Path $_ ; Add-Type -Path $_ }\n' +
     'popd\n\n' + 
     '$verificationErrors = new-object System.Text.StringBuilder\n' + 
     '$baseURL = "${base_url}"\n' +
     'try { \n' + 
     '$connection = (New-Object Net.Sockets.TcpClient)\n' + 
      '$connection.Connect("127.0.0.1",4444)\n' + 
     '$connection.Close()\n' + 
      '} catch {\n' + 
     'start-process -filepath "C:\\Windows\\System32\\cmd.exe" -argumentlist "start cmd.exe /c ' + 'c:\\java\\selenium\\hub.cmd"\n'+
     'start-process -filepath "C:\\Windows\\System32\\cmd.exe" -argumentlist "start cmd.exe /c ' + 'c:\\java\\selenium\\node.cmd"\n'+
     'start-sleep -seconds 10\n' +
     '}\n' +
     '$capability = [OpenQA.Selenium.Remote.DesiredCapabilities]::.Firefox()\n'+
            '$capabillity.SetCapability([OpenQA.Selenium.Remote.CapabilityType]::Version, "8")\n' +
     '$uri = [System.Uri]("http://127.0.0.1:4444/wd/hub")\n'+
     '$selenium = new-object OpenQA.Selenium.Remote.RemoteWebDriver($uri, $capability)\n'+
     '# RC script generated by Selenium IDE formatter\n'+
     '# example usage:\n'+
     '# $selenium = new-object Selenium.DefaultSelenium("localhost", 4444, "*firefox", "http://www.wikipedia.org/") \n' + 
     '# $selenium.Start()\n' + 
     '# $selenium.Open("/") \n' + 
     '# $selenium.Click("css=strong") \n' + 
     '# $selenium.Click("link=Selenium (software)") \n' + 
     '# $selenium.Click("id=searchButton") \n' + 
     '# $selenium.WaitForPageToLoad("30000") \n' + 
     '# $selenium.Click("id=searchButton") \n' + 
     '# [NUnit.Framework.Assert]::AreEqual($selenium.GetTitle(), "Selenium (software) - Wikipedia, the free encyclopedia") \n',
      footer: '# Cleanup\n' +
     'try {\n' +
     '$selenium.Quit()\n' +
     '} catch [Exception] {\n' +
     '# Ignore errors if unable to close the browser\n' +
          '}\n' 
};


this.configForm =
	'<description>Selenium instance name</description>' +
	'<textbox id="options_receiver" />' +
	'<description>RC Capabilities</description>' +
	'<menulist id="options_driver_capabilities"><menupopup>' +
	'<menuitem label="Firefox" value="Firefox()"/>' +
	'</menupopup></menulist>'+ 
	'<description>Base URL</description>' +
	'<textbox id="options_base_url" />' +
	'<description>Indent</description>' +
	'<menulist id="options_indent"><menupopup>' +
	'<menuitem label="Tab" value="tab"/>' +
	'<menuitem label="1 space" value="1"/>' +
	'<menuitem label="2 spaces" value="2"/>' +
	'<menuitem label="3 spaces" value="3"/>' +
	'<menuitem label="4 spaces" value="4"/>' +
	'</menupopup></menulist>' +
	'<checkbox id="options_showSelenese" label="Show Selenese"/>';
 
 
function verify(statement) {
  return "try {\n" +
      indents(1) + statement + "\n" +
      "} catch [NUnit.Framework.AssertionException] {\n" +
      indents(1) + "$verificationErrors.Append($_.Exception.Message)\n" +
      '}';
}
 
function testMethodName(testName) {
	return 'The' + capitalize(testName) + 'Test';
}

NotEquals.prototype.assert = function() {
  return '[NUnit.Framework.Assert]::AreNotEqual(' + this.e1.toString() + ', ' + this.e2.toString() +  ')';
};

function assertTrue(expression) {
  return '[NUnit.Framework.Assert]::IsTrue(' + expression.toString() + ')';
}
 
function assertFalse(expression) {
  return '[NUnit.Framework.Assert]::IsFalse(' + expression.toString() + ')';
}

function verifyTrue(expression) {
	return verify(assertTrue(expression));
}

function verifyFalse(expression) {
	return verify(assertFalse(expression));
}

function joinExpression(expression) {
    return '[String]::Join(",", ' + expression.toString() + ')';
}

function assignToVariable(type, variable, expression) {
	return capitalize(type) + " " + variable + " = " + expression.toString();
}


function waitFor(expression) {
  return "for ([int] $second = 0;; $second++) {\n" +
      indents(1) + 'if ($second -gt 60) [NUnit.Framework.Assert]::Fail("timeout");\n' +
      indents(1) + "try\n" +
      indents(1) + "{\n" +
      (expression.setup ? indents(2) + expression.setup() + "\n" : "") +
      indents(2) + "if (" + expression.toString() + ") break;\n" +
      indents(1) + "}\n" +
      indents(1) + "catch [Exception]\n" +
      indents(1) + "{}\n" +
      indents(1) + "Thread.Sleep(1000)\n" +
      "}";
}

function assertOrVerifyFailure(line, isAssert) {
  var message = '"expected failure"';
  var failStatement = isAssert ? "[NUnit.Framework.Assert]::Fail(" + message + ")" :
      "$verificationErrors.Append(" + message + ")";
  return "try\n" +
      "{\n" +
      line + "\n" +
      failStatement + "\n" +
      "}\n" +
      "catch [Exception] {}\n";
}


Equals.prototype.toString = function() {
	return this.e1.toString() + ' -eq '  + this.e2.toString();
};

NotEquals.prototype.toString = function() {
	return this.e1.toString() + ' -ne ' + this.e2.toString();
};

Equals.prototype.assert = function() {
  return '[NUnit.Framework.Assert]::AreEqual(' + this.e1.toString() + ', ' + this.e2.toString() + ');';
};
 
Equals.prototype.verify = function() {
	return verify(this.assert());
};

NotEquals.prototype.verify = function() {
	return verify(this.assert());
};

RegexpMatch.prototype.toString = function() {
	return '[Regex]::IsMatch(' + this.expression + ', ' + string(this.pattern) + ')';
};

function pause(milliseconds) {
  return '[System.Threading.Thread]::Sleep(' + parseInt(milliseconds, 10) + ')';
}

function echo(message) {
  return 'write-output ' + xlateArgument(message) + ')';
}

function statement(expression) {
	return expression.toString() + ';';
}

function array(value) {
  var str = '@(';
  for (var i = 0; i < value.length; i++) {
    str += string(value[i]);
    if (i < value.length - 1) str += ', ';
  }
  str += ')';
  return str;
}

function nonBreakingSpace() {
    return "\"\\u00a0\"";
}

CallSelenium.prototype.toString = function() {
	var result = '';
	if (this.negative) {
		result += '!';
	}
	if (options.receiver) {
		result += options.receiver + '.';
	}
	result += capitalize(this.message);
	result += '(';
	for (var i = 0; i < this.args.length; i++) {
		result += this.args[i];
		if (i < this.args.length - 1) {
			result += ', ';
		}
	}
	result += ')';
	return result;
};

function formatComment(comment) {
	return comment.comment.replace(/.+/mg, function(str) {
			return '# ' + str;
		});
}
